// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Habit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("HabitPreparationId")
                        .HasColumnType("bigint")
                        .HasColumnName("habit_preparation_id");

                    b.Property<bool>("IsPreparationHabit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preparation_habit");

                    b.Property<string>("Motivation")
                        .HasColumnType("text")
                        .HasColumnName("motivation");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<NpgsqlTsVector>("TitleSearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("title_search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "german")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title" });

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_habit");

                    b.HasIndex("HabitPreparationId")
                        .HasDatabaseName("ix_habit_habit_preparation_id");

                    b.HasIndex("TitleSearchVector")
                        .HasDatabaseName("ix_habit_title_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TitleSearchVector"), "GIN");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_habit_user_id");

                    b.ToTable("habit", "public");
                });

            modelBuilder.Entity("Domain.HabitTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<long>("HabitId")
                        .HasColumnType("bigint")
                        .HasColumnName("habit_id");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_habit_time");

                    b.HasIndex("HabitId")
                        .HasDatabaseName("ix_habit_time_habit_id");

                    b.ToTable("habit_time", "public");
                });

            modelBuilder.Entity("Domain.HabitTrigger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("HabitId")
                        .HasColumnType("bigint")
                        .HasColumnName("habit_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long?>("TriggerHabitId")
                        .HasColumnType("bigint")
                        .HasColumnName("trigger_habit_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_habit_trigger");

                    b.HasIndex("HabitId")
                        .HasDatabaseName("ix_habit_trigger_habit_id");

                    b.HasIndex("TriggerHabitId")
                        .HasDatabaseName("ix_habit_trigger_trigger_habit_id");

                    b.ToTable("habit_trigger", "public");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<NpgsqlTsVector>("DisplayNameSearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("display_name_search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "german")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "DisplayName" });

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("DisplayNameSearchVector")
                        .HasDatabaseName("ix_user_display_name_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DisplayNameSearchVector"), "GIN");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_user_phone_number");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("Domain.Habit", b =>
                {
                    b.HasOne("Domain.Habit", "Base")
                        .WithMany("Preparations")
                        .HasForeignKey("HabitPreparationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habit_habit_habit_preparation_id");

                    b.HasOne("Domain.User", "User")
                        .WithMany("Habits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habit_user_user_id");

                    b.Navigation("Base");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.HabitTime", b =>
                {
                    b.HasOne("Domain.Habit", "Habit")
                        .WithMany("Times")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habit_time_habit_habit_id");

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("Domain.HabitTrigger", b =>
                {
                    b.HasOne("Domain.Habit", "Habit")
                        .WithMany("Triggers")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habit_trigger_habit_habit_id");

                    b.HasOne("Domain.Habit", "TriggerHabit")
                        .WithMany()
                        .HasForeignKey("TriggerHabitId")
                        .HasConstraintName("fk_habit_trigger_habit_trigger_habit_id");

                    b.Navigation("Habit");

                    b.Navigation("TriggerHabit");
                });

            modelBuilder.Entity("Domain.Habit", b =>
                {
                    b.Navigation("Preparations");

                    b.Navigation("Times");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Habits");
                });
#pragma warning restore 612, 618
        }
    }
}
